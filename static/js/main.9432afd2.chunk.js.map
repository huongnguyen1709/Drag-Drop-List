{"version":3,"sources":["Data/initial-data.js","Components/Task.js","Components/Column.js","App.js","serviceWorker.js","index.js"],"names":["initialData","tasks","id","content","columns","title","taskIds","columnOrder","Container","styled","div","props","isDragDisabled","isDragging","Task","task","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h2","TaskList","isDraggingOver","InnerList","nextProps","this","map","key","Component","Column","column","droppableId","type","droppableProps","placeholder","taskMap","taskId","PureComponent","App","onDragEnd","result","document","body","style","color","backgroundColor","console","log","destination","source","start","state","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newState","setState","newTaskIds","newColumn","newColumnOrder","onDragStart","direction","columnId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9432afd2.chunk.js","sourcesContent":["const initialData = {\r\n    tasks: {\r\n        'task-1': { id: 'task-1', content: 'Take out the garbage' },\r\n        'task-2': { id: 'task-2', content: 'Watch my favorite show' },\r\n        'task-3': { id: 'task-3', content: 'Charge my phone' },\r\n        'task-4': { id: 'task-4', content: 'Cook dinner' },\r\n    },\r\n\r\n    columns: {\r\n        'column-1': {\r\n            id: 'column-1',\r\n            title: 'To Do',\r\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4']\r\n        },\r\n\r\n        'column-2': {\r\n            id: 'column-2',\r\n            title: 'In Progress',\r\n            taskIds: []\r\n        },\r\n\r\n        'column-3': {\r\n            id: 'column-3',\r\n            title: 'Done',\r\n            taskIds: []\r\n        }\r\n    },\r\n\r\n    // Facilitate reordering of the columns\r\n    columnOrder: ['column-1', 'column-2', 'column-3']\r\n}\r\n\r\nexport default initialData","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\n\r\nconst Container = styled.div`\r\n    font-size: 20px;\r\n    border: 1px solid lightgrey;\r\n    border-radius: 2px;\r\n    padding: 8px;\r\n    margin-bottom: 8px;\r\n    background-color: ${props =>\r\n        props.isDragDisabled\r\n            ? 'lightgrey'\r\n            : props.isDragging\r\n                ? 'lightgreen'\r\n                : 'white'\r\n    };\r\n`\r\n\r\n// const Handle = styled.div`\r\n//     width: 20px;\r\n//     height: 20px;\r\n//     background-color: orange;\r\n//     border-radius: 4px;\r\n//     margin-right: 8px;\r\n// `\r\n\r\nconst Task = (props) => {\r\n    const isDragDisabled = props.task.id === 'task-1'\r\n    return (\r\n        <Draggable\r\n            draggableId={props.task.id}\r\n            index={props.index}\r\n            isDragDisabled={isDragDisabled}\r\n        >\r\n            {(provided, snapshot) => (\r\n                <Container\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                    isDragging={snapshot.isDragging}\r\n                    isDragDisabled={isDragDisabled}\r\n                >\r\n                    {/* <Handle {...provided.dragHandleProps} /> */}\r\n                    {props.task.content}\r\n                </Container>\r\n            )}\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react'\r\nimport styled from 'styled-components'\r\nimport Task from './Task'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nconst Container = styled.div`\r\n    margin: 8px;\r\n    border: 1px solid lightgrey;\r\n    border-radius: 2px;\r\n    background-color: skyblue;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\nconst Title = styled.h2`\r\n    padding: 8px;\r\n    text-align: center;\r\n    background-color: #ed402d;\r\n    color: #eddfdd;\r\n    font-size: 25px;\r\n`\r\nconst TaskList = styled.div`\r\n    padding: 8px;\r\n    background-color: ${props => (props.isDraggingOver ? '#48d995' : 'inherit')};\r\n    transition: background-color 0.2s ease;\r\n    flex-grow: 1;\r\n    min-height: 100px;\r\n`\r\n\r\nclass InnerList extends Component {\r\n    shouldComponentUpdate(nextProps) {\r\n        if (nextProps.tasks === this.props.tasks) {\r\n            return false // if the tasks is the same, position not changed, so not allow a render\r\n        }\r\n        return true // allow render\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.tasks.map((task, index) => {\r\n                        return <Task key={task.id} task={task} index={index} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst Column = (props) => {\r\n    return (\r\n        <Draggable draggableId={props.column.id} index={props.index}>\r\n            {provided => (\r\n                <Container\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <Title {...provided.dragHandleProps}>{props.column.title}</Title>\r\n                    <Droppable\r\n                        // a Droppable has one required a droppableId (this ID need to be unique within the DragDropContext)\r\n                        droppableId={props.column.id}\r\n                        // column-3 là done, 2 column còn lại là active, column-3 sẽ ko droppable dc, cùng type sẽ droppable dc, khác type thì không\r\n                        //type={props.column.id === 'column-3' ? 'done' : 'active'}\r\n                        type='task'\r\n                    >\r\n                        {   /* (...) inside the bracket, we have 'provided' object has a property called \r\n                                droppable props (provided.droppableProps)  \r\n                            */\r\n                            (provided, snapshot) => (\r\n                                <TaskList\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                >\r\n                                    <InnerList tasks={props.tasks} />\r\n\r\n                                    {/* A place holder is a react element that is used to increase the available space in a droppable during a drag when it's needed */}\r\n                                    {provided.placeholder}\r\n                                </TaskList>\r\n                            )\r\n                        }\r\n                    </Droppable>\r\n                </Container>\r\n            )}\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nexport default Column;","import React, { Component, PureComponent } from 'react'\nimport initialData from './Data/initial-data'\nimport Column from './Components/Column'\nimport 'css-reset-and-normalize'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    width: 95%;\n    margin: 10px auto;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr) \n`\n\nclass InnerList extends PureComponent { // PureComponent check as we have shouldComponentUpdate\n    // shouldComponentUpdate(nextProps) {\n    //     if (\n    //         nextProps.column === this.props.column &&\n    //         nextProps.taskMap === this.props.taskMap &&\n    //         nextProps.index === this.props.index\n    //     ) { return false }\n    //     return true\n    // }\n\n    render() {\n        const { column, taskMap, index } = this.props\n        const tasks = column.taskIds.map(taskId => taskMap[taskId])\n        return <Column column={column} tasks={tasks} index={index} />\n    }\n}\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = initialData\n    }\n\n    /*onDragStart = () => {\n        document.body.style.color = 'orange'\n        document.body.style.transition = 'background-color 0.2s ease'\n    }\n\n    onDragUpdate = update => { // make styles change during the drag\n        const { destination } = update\n        const opacity = destination\n            ? destination.index / Object.keys(this.state.tasks).length\n            : 0\n        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`\n    }*/\n\n    onDragEnd = result => {\n        // change the color of body back to original\n        document.body.style.color = 'inherit'\n        document.body.style.backgroundColor = 'inherit'\n        // TODO: reorder our column and change state\n        console.log(result)\n        const { destination, source, draggableId, type } = result\n        if (!destination) {\n            return\n        }\n\n        if (destination.droppableId === source.droppableId &&\n            destination.index === source.index) {\n            return\n        }\n\n        if (type === 'column') {\n            const newColumnOrder = Array.from(this.state.columnOrder)\n            newColumnOrder.splice(source.index, 1)\n            newColumnOrder.splice(destination.index, 0, draggableId)\n\n            const newState = {\n                ...this.state,\n                columnOrder: newColumnOrder\n            }\n            this.setState(newState)\n            return\n        }\n\n        const start = this.state.columns[source.droppableId]\n        const finish = this.state.columns[destination.droppableId]\n\n        if (start === finish) {\n            const newTaskIds = Array.from(start.taskIds)\n            newTaskIds.splice(source.index, 1)\n            newTaskIds.splice(destination.index, 0, draggableId)\n\n            const newColumn = {\n                ...start,\n                taskIds: newTaskIds\n            }\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newColumn.id]: newColumn\n                }\n            }\n\n            this.setState(newState)\n            return\n        }\n\n        // Moving from one list to another\n        const startTaskIds = Array.from(start.taskIds)\n        startTaskIds.splice(source.index, 1)\n        const newStart = {\n            ...start,\n            taskIds: startTaskIds\n        }\n\n        const finishTaskIds = Array.from(finish.taskIds)\n        finishTaskIds.splice(destination.index, 0, draggableId)\n        const newFinish = {\n            ...finish,\n            taskIds: finishTaskIds\n        }\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newStart.id]: newStart,\n                [newFinish.id]: newFinish\n            }\n        }\n\n        this.setState(newState)\n        return\n    }\n\n    render() {\n        return (\n            // the only required callback for a DragDropContext is onDragEnd\n            <DragDropContext\n                // onDragStart // is called when the drag start\n                onDragStart={this.onDragStart}\n                // onDragUpdate is called when something changes during a drag such as an item is moving into a new position\n                // onDragUpdate={this.onDragUpdate}\n                onDragEnd={this.onDragEnd} // is called at the end of a drag\n            >\n                <Droppable\n                    droppableId='all-columns'\n                    direction='horizontal'\n                    type='column'\n                >\n                    {provided => (\n                        <Container\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                        >\n                            {\n                                this.state.columnOrder.map((columnId, index) => {\n                                    const column = this.state.columns[columnId]\n                                    return (\n                                        <InnerList\n                                            key={columnId}\n                                            column={column}\n                                            taskMap={this.state.tasks}\n                                            index={index}\n                                        />\n                                    )\n                                })\n                            }\n                            {provided.placeholder}\n                        </Container>\n                    )}\n                </Droppable>\n            </DragDropContext>\n\n        );\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}